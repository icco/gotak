name: Tests
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version:
          - "1.21"
          - "1.22"
          - "1.23"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
      - name: Download dependencies
        run: go mod download
      - name: Verify dependencies
        run: go mod verify
      - name: Run go vet
        run: go vet ./...
      - name: Run tests with coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.23'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache: true
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos:
          - linux
          - windows
          - darwin
        goarch:
          - amd64
          - arm64
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache: true
      - name: Build main CLI
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -o gotak-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/gotak
      - name: Build server
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          cd server
          go build -o server-${{ matrix.goos }}-${{ matrix.goarch }}
      - name: Build PTN parser
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: go build -o parse-ptn-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/parse-ptn
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gotak_test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache: true
      - name: Run server integration tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/gotak_test?sslmode=disable
        run: |
          cd server
          go test -v -tags=integration ./...
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.23"
          cache: true
      - name: Install Gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      - name: Run Gosec Security Scanner
        run: gosec -fmt sarif -out results.sarif ./...
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
